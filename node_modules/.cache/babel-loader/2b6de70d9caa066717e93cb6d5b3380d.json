{"ast":null,"code":"const initialState = {\n  hasPlayed: [],\n  players: {\n    1: {\n      name: \"Dragon Knight\",\n      pv: 235,\n      pvMax: 235,\n      mana: 50,\n      manaMax: 50,\n      hasPlayed: false,\n      id: 1\n    },\n    2: {\n      name: \"Nightblade\",\n      pv: 110,\n      pvMax: 110,\n      mana: 40,\n      manaMax: 40,\n      hasPlayed: false,\n      id: 2\n    },\n    3: {\n      name: \"Templar\",\n      pv: 100,\n      pvMax: 100,\n      mana: 80,\n      manaMax: 80,\n      hasPlayed: false,\n      id: 3\n    },\n    4: {\n      name: \"Sorcerer\",\n      pv: 100,\n      pvMax: 100,\n      mana: 90,\n      manaMax: 90,\n      hasPlayed: false,\n      id: 4\n    }\n  },\n  monster: {\n    name: \"Molag Bal\",\n    pv: 500,\n    pvMax: 500\n  }\n};\n\nconst rootReducer = (state = initialState, action) => {\n  if (action.type === 'hitMonster') {\n    let damages = action.payload.damages;\n    let newState = { ...state,\n      monster: { ...state.monster,\n        pv: state.monster.pv - damages\n      }\n    };\n    console.log('hitMonster: ', newState);\n    return newState;\n  }\n\n  if (action.type === 'hitPlayer') {\n    let damages = action.payload.damages;\n    let currentPlayer = action.payload.player;\n    let newTable = [action.payload.player];\n    let newState = { ...state,\n      hasPlayed: state.hasPlayed.concat(newTable),\n      players: { ...state.players,\n        [currentPlayer]: { ...state.players[currentPlayer],\n          pv: state.players[currentPlayer].pv - damages\n        }\n      }\n    };\n    console.log('hitPlayer: ', newState);\n    return newState;\n  }\n\n  if (action.type === 'turnEnds') {\n    if (state.players[1].hasPlayed === true && state.players[2].hasPlayed === true && state.players[3].hasPlayed === true && state.players[4].hasPlayed === true) {\n      let reset = action.payload.reset;\n      let newState = { ...state,\n        players: { ...state.players,\n          [1]: { ...state.players[1],\n            hasPlayed: reset\n          },\n          [2]: { ...state.players[2],\n            hasPlayed: reset\n          },\n          [3]: { ...state.players[3],\n            hasPlayed: reset\n          },\n          [4]: { ...state.players[4],\n            hasPlayed: reset\n          }\n        }\n      };\n      console.log('turnEnds: ', newState);\n      return newState;\n    } else {\n      return state;\n    }\n  }\n\n  return state;\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/home/azerty/react/redux-game/src/reducers/index.js"],"names":["initialState","hasPlayed","players","name","pv","pvMax","mana","manaMax","id","monster","rootReducer","state","action","type","damages","payload","newState","console","log","currentPlayer","player","newTable","concat","reset"],"mappings":"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","sourcesContent":["const initialState = {\n    hasPlayed: [],\n    players: {\n      1: { name: \"Dragon Knight\", pv: 235, pvMax: 235, mana: 50, manaMax: 50, hasPlayed: false, id: 1 },\n      2: { name: \"Nightblade\", pv: 110, pvMax: 110, mana: 40, manaMax: 40, hasPlayed: false, id: 2 },\n      3: { name: \"Templar\", pv: 100, pvMax: 100, mana: 80, manaMax: 80, hasPlayed: false, id: 3 },\n      4: { name: \"Sorcerer\", pv: 100, pvMax: 100, mana: 90, manaMax: 90, hasPlayed: false, id: 4 }\n    },\n    monster: {\n      name: \"Molag Bal\",\n      pv: 500,\n      pvMax: 500\n    }\n  };\n   \n  const rootReducer = (state = initialState, action) => {\n\n    if (action.type === 'hitMonster') {\n      let damages = action.payload.damages\n      let newState = {\n        ...state,\n        monster: {\n          ...state.monster,\n          pv: state.monster.pv - damages\n        }\n      }\n      console.log('hitMonster: ', newState);\n      return newState\n    }\n\n    if (action.type === 'hitPlayer') {\n      let damages = action.payload.damages\n      let currentPlayer = action.payload.player\n      let newTable = [action.payload.player]\n      let newState = {\n        ...state,\n        hasPlayed: state.hasPlayed.concat(newTable),\n        players: {\n          ...state.players,\n          [currentPlayer]: {\n            ...state.players[currentPlayer],\n            pv: state.players[currentPlayer].pv - damages\n          }\n        }\n      }\n      console.log('hitPlayer: ', newState);\n      return newState\n    }\n\n    if (action.type === 'turnEnds') {\n      if (state.players[1].hasPlayed === true && state.players[2].hasPlayed === true && state.players[3].hasPlayed === true && state.players[4].hasPlayed === true) {\n\n        let reset = action.payload.reset\n        let newState = {\n          ...state,\n          players: {\n            ...state.players,\n            [1]: {\n              ...state.players[1],\n              hasPlayed: reset\n            },\n            [2]: {\n              ...state.players[2],\n              hasPlayed: reset\n            },\n            [3]: {\n              ...state.players[3],\n              hasPlayed: reset\n            },\n            [4]: {\n              ...state.players[4],\n              hasPlayed: reset\n            },\n          }\n        }\n        console.log('turnEnds: ', newState);\n        return newState\n      } else {\n        return state;\n      }\n    }\n\n      return state;\n  }\n   \n  export default rootReducer;\n  "]},"metadata":{},"sourceType":"module"}